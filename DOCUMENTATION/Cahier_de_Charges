### Cahier des Charges  **Projet : Développement d’un site web pour la gestion d’un hôtel (2ème année BTS SIO)**  

---

#### 1. **Contexte et Objectifs**  
Le projet consiste à développer un site web dynamique pour un hôtel fictif, permettant de gérer les chambres, les réservations et d’offrir des informations aux clients. Le site devra inclure une interface utilisateur intuitive et des fonctionnalités adaptées pour les utilisateurs (clients et administrateurs).  

L'objectif est d'appliquer les compétences acquises en développement web, bases de données et gestion de projet dans un environnement réaliste.  
Le projet consiste à développer une application web de gestion d'hôtel pour un établissement fictif, **Hotel**. Cette application permettra de :
1. **Consulter les chambres disponibles** (avec leurs caractéristiques, prix et services associés).
2. **Gérer les réservations** (par les clients ou par l'administration).
3. **Administrer les utilisateurs** (gestion des clients et administrateurs).
4. **Afficher des statistiques** simples pour l’administrateur (taux d’occupation, revenus mensuels, etc.).

---

#### 2. **Fonctionnalités à Implémenter**  

**A. Frontend (Interface utilisateur)**  
- Page d’accueil :  
  - Présentation de l’hôtel.  
  - Mise en avant des services.  
- Liste des chambres :  
  - Affichage des chambres disponibles (avec images et détails).  
  - Bouton pour réserver une chambre.  
- Page des détails d’une chambre :  
  - Description complète de la chambre.  
  - Affichage des services inclus.  
- Formulaire de réservation :  
  - Permettre aux clients de réserver une chambre en fournissant leurs informations.  
  - Validation des données saisies.  

**B. Backend (Administration)**  
- Gestion des chambres :  
  - Ajouter, modifier et supprimer des chambres.  
  - Gestion des images associées aux chambres.  
- Gestion des réservations :  
  - Voir les réservations en cours et celles passées.  
  - Supprimer ou modifier une réservation.  
- Gestion des utilisateurs :  
  - Deux types d’utilisateurs : Administrateurs et Clients.  
  - Connexion sécurisée avec mots de passe hashés.  

**C. Autres fonctionnalités**  
- Système d’authentification :  
  - Accès restreint à certaines pages (utilisateurs connectés).  
- Affichage des messages d’erreur ou de confirmation (ex : "Réservation réussie").  



L'objectif est d'offrir une interface fonctionnelle pour les clients et une interface d'administration conviviale pour le personnel.

---

### **Fonctionnalités demandées**

#### **1. Interface client**
- **Page d'accueil** :
  - Présentation de l'hôtel et de ses services.
  - Affichage dynamique des offres ou promotions.
- **Page des chambres** :
  - Liste des chambres disponibles avec image, description, prix et services.
  - Possibilité de filtrer par prix, nombre de personnes, ou type de chambre.
  - Détail de la chambre avec formulaire de réservation.
- **Réservation** :
  - Formulaire pour saisir les informations du client (nom, email, téléphone, dates).
  - Vérification des disponibilités et validation.
  - Confirmation et numéro de réservation.

#### **2. Interface administrateur**
- **Gestion des chambres** :
  - Ajouter, modifier et supprimer des chambres (type, prix, description, services).
- **Gestion des réservations** :
  - Voir toutes les réservations avec filtre par date, chambre ou client.
  - Supprimer ou modifier une réservation.
- **Gestion des utilisateurs** :
  - Ajouter, modifier ou supprimer des utilisateurs (client ou administrateur).
- **Statistiques** :
  - Taux d’occupation mensuel.
  - Revenu total par mois ou par chambre.


---

#### 3. **Technologies à Utiliser**  

**Frontend :**  
- **HTML5, CSS3, JavaScript** : pour la structure et le style.  
- **Bootstrap** : pour un design réactif.  

**Backend :**  
- **PHP (>=8.0)** : pour la logique serveur.  
- **PDO** : pour les interactions sécurisées avec la base de données.  

**Base de données :**  
- **MySQL** : pour le stockage des données (utilisateurs, chambres, réservations).  

**Environnement de développement :**  
- **XAMPP** (PHP, Apache, MySQL).  

### **Contraintes techniques**
1. **Langages** :  
   - **Front-end** : HTML5, CSS3 (intégration avec **Bootstrap** pour la mise en page), JavaScript (optionnel pour des interactions dynamiques).  
   - **Back-end** : PHP (POO avec des fichiers bien organisés).  
   - **Base de données** : MySQL.  
   
2. **Structure** :  
   - Modèle MVC (Modèle-Vue-Contrôleur) pour organiser le code.
   - Respect d'une architecture propre et modulaire.

3. **Équipement** :  
   - XAMPP comme serveur local.  
   - Utilisation de **phpMyAdmin** pour gérer la base de données.

4. **Sécurité** :  
   - Mot de passe stocké avec hashage (ex. : `password_hash`).
   - Validation des données côté serveur (ex. : `filter_input` pour éviter les injections SQL).
---

#### 4. **Structure du Projet (Arborescence des Fichiers)**  

```
/hotel_project
├── /bdd
│   ├── bdd.php                # Connexion à la base de données
│   ├── requetes.php           # Fonctions pour requêtes SQL
├── /controleur
│   ├── chambreController.php  # Gestion des chambres
│   ├── reservationController.php # Gestion des réservations
├── /modele
│   ├── chambreModel.php       # Modèle pour les chambres
│   ├── reservationModel.php   # Modèle pour les réservations
├── /vue
│   ├── header.php             # En-tête du site
│   ├── footer.php             # Pied de page
│   ├── listeChambre.php       # Page des chambres
│   ├── detailsChambre.php     # Page des détails d’une chambre
│   ├── reservationForm.php    # Formulaire de réservation
├── index.php                  # Page d'accueil
├── style.css                  # Feuille de style
```

---


### **Ressources fournies**
- **Base de données initiale** avec les tables suivantes :
  - `chambres` (id, type, description, prix, nb_max_personnes, image).  
  - `reservations` (id, id_chambre, id_client, date_debut, date_fin, prix_total).  
  - `utilisateurs` (id, type, nom, prenom, email, mot_de_passe).  

- **Charte graphique simple** avec palette de couleurs et police recommandée.  

- **Tutoriels et documentation** : Des liens vers des ressources (Bootstrap, PHP, SQL, etc.) seront fournis.

---

### **Planning (4 semaines)**

| **Étape**                 | **Description**                                                                                 | **Durée**    |
|---------------------------|-------------------------------------------------------------------------------------------------|--------------|
| **Semaine 1 : Initialisation**    | - Mise en place de l'environnement de travail. <br> - Création de la base de données. <br> - Organisation du projet (MVC).  | 5 jours       |
| **Semaine 2 : Interface client**  | - Création des pages client (accueil, liste des chambres, détail, réservation). <br> - Connexion à la base de données.      | 5 jours       |
| **Semaine 3 : Interface admin**   | - Création des fonctionnalités d'administration. <br> - Gestion des chambres et des utilisateurs.                           | 6 jours       |
| **Semaine 4 : Finalisation**      | - Ajout des statistiques et test des fonctionnalités. <br> - Documentation du projet.                                       | 4 jours       |

---

### **Répartition des tâches**
#### **Programmeur 1**
- Mise en place de la structure (MVC).
- Création de l'interface client.
- Connexion à la base de données pour les réservations.

#### **Programmeur 2**
- Création de l'interface d'administration.
- Gestion des utilisateurs et des statistiques.
- Tests et corrections des bugs.

---

### **Livrables**
1. **Code source** bien commenté et structuré.  
2. **Documentation utilisateur** pour expliquer le fonctionnement de l'application (client et admin).  
3. **Documentation technique** pour détailler l’architecture et les choix de développement.  

---

### **Critères de réussite**
- Application fonctionnelle avec les fonctionnalités demandées.  
- Code propre et organisé (respect du MVC).  
- Interface utilisateur responsive et intuitive.  
- Pas d’erreurs critiques ou de failles de sécurité majeures.
